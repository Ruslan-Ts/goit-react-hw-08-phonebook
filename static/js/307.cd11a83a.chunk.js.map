{"version":3,"file":"static/js/307.cd11a83a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactsList/ContactsList.jsx","Pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\nexport const selectContactsList = state => state.contacts.contactsArr;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContactsList, selectFilter],\n  (contactsArr, filter) => {\n    return contactsArr.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport {} from './ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport Notiflix from 'notiflix';\nimport { selectContactsList } from 'redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.some(\n        contact =>\n          contact.name.toLowerCase() ===\n          e.target.elements.name.value.toLowerCase()\n      )\n    ) {\n      Notiflix.Notify.failure(`Name ${[name]} is already exist`);\n      return;\n    } else if (\n      contacts.some(\n        contact => contact.number === e.target.elements.number.value\n      )\n    ) {\n      Notiflix.Notify.failure(\n        `Number ${e.target.elements.number.value} is already exist`\n      );\n      return;\n    }\n    dispatch(\n      addContact({\n        name: e.target.elements.name.value,\n        phone: e.target.elements.number.value,\n      })\n    );\n    console.log(name);\n    console.log(number);\n    Notiflix.Notify.success('Contact added');\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Enter name\"\n          onChange={handleInputChange}\n          value={name}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter phone number\"\n          onChange={handleInputChange}\n          value={number}\n        />\n      </label>\n\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nimport {} from './Filter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        placeholder=\"Enter name of contact\"\n        value={filter}\n        onChange={onFilter}\n      ></input>\n    </label>\n  );\n};\n\nexport default Filter;\n","import {} from './ContactListItem.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst ContactListItem = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const handleDelete = (id, name) => {\n    dispatch(deleteContact(id));\n    Notiflix.Notify.success(`Contact ${name} deleted successfully`);\n  };\n\n  return visibleContacts.map(({ id, name, number }) => {\n    return (\n      <li key={id}>\n        {name}: {number}\n        <button type=\"button\" onClick={() => handleDelete(id, name)}>\n          Delete\n        </button>\n      </li>\n    );\n  });\n};\n\nexport default ContactListItem;\n","import {} from './ContactsList.styled';\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nconst ContactsList = () => {\n  return (\n    <ul>\n      <ContactListItem />\n    </ul>\n  );\n};\n\nexport default ContactsList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const { contactsArr, isLoading, error } = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>PhoneBook</h1>\n      <ContactForm />\n\n      <div>\n        {isLoading && !error && <b>Loading...</b>}\n        {error && <p>Oops, something went wrong</p>}\n        {contactsArr.length > 0 && (\n          <div>\n            <h2>Contacts</h2>\n            <Filter />\n          </div>\n        )}\n        {contactsArr.length > 0 && <ContactsList />}\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectContactsList","contactsArr","selectFilter","filter","selectVisibleContacts","createSelector","_ref","name","toLowerCase","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","e","_e$currentTarget","currentTarget","value","_jsxs","onSubmit","preventDefault","some","contact","target","elements","Notiflix","concat","addContact","phone","console","log","children","_jsx","type","pattern","title","required","placeholder","onChange","setFilter","visibleContacts","map","id","onClick","deleteContact","handleDelete","ContactListItem","_useSelector","isLoading","error","useEffect","fetchContacts","ContactForm","length","Filter","ContactsList"],"sourceRoot":""}
{"version":3,"file":"static/js/457.5bcab541.chunk.js","mappings":"iPAQaA,GANYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+EAMTF,EAAAA,GAAAA,KAAWG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,gMASxBE,EAAQJ,EAAAA,GAAAA,MAAYK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,0KAWpBI,EAASN,EAAAA,GAAAA,OAAaO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,gW,iDC1BtBM,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,QAAS,EACzCC,EAAqB,SAAAF,GAAK,OAAIA,EAAMC,SAASE,WAAY,EAGzDC,EAAe,SAAAJ,GAAK,OAAIA,EAAMK,MAAO,EAErCC,GAAwBC,EAAAA,EAAAA,IACnC,CAACL,EAAoBE,IACrB,SAACD,EAAaE,GACZ,OAAOF,EAAYE,QAAO,SAAAG,GAAO,OAAAA,EAAJC,KACtBC,cAAcC,SAASN,EAAOK,cAAc,GAErD,I,SCgFF,EAvFoB,WAClB,IAAAE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BH,EAAIK,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA4BJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBG,GAAWC,EAAAA,EAAAA,MACXrB,GAAWsB,EAAAA,EAAAA,IAAYrB,GAEvBsB,EAAoB,SAAAC,GACxB,IAAAC,EAAwBD,EAAEE,cAAlBlB,EAAIiB,EAAJjB,KAAMmB,EAAKF,EAALE,MACd,OAAQnB,GACN,IAAK,OACHO,EAAQY,GACR,MAEF,IAAK,SACHR,EAAUQ,GAMhB,EAmCA,OACEC,EAAAA,EAAAA,MAACvC,EAAU,CAACwC,SAlCO,SAAAL,GACnBA,EAAEM,iBAGA9B,EAAS+B,MACP,SAAAC,GAAO,OAAIA,EAAQxB,KAAKC,gBAAkBD,EAAKC,aAAa,IAG9DwB,IAAAA,OAAAA,QAAwB,QAADC,OAAS,CAAC1B,GAAK,sBAE7BR,EAAS+B,MAAK,SAAAC,GAAO,OAAIA,EAAQd,SAAWA,CAAM,IAC3De,IAAAA,OAAAA,QAAwB,UAADC,OAAWhB,EAAM,uBAG1CE,GACEe,EAAAA,EAAAA,IAAW,CACT3B,KAAAA,EACAU,OAAAA,KAGDkB,SACAC,MAAK,WACJJ,IAAAA,OAAAA,QAAwB,gBAC1B,IACCK,OAAM,WACLL,IAAAA,OAAAA,QAAwB,0BAC1B,IAEFlB,EAAQ,IACRI,EAAU,IACVK,EAAEe,OAAOC,QACX,EAGqCC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SAAAD,UACEC,EAAAA,EAAAA,KAAChD,EAAK,CACJiD,KAAK,OACLnC,KAAK,OACLoC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,YAAY,aACZC,SAAUzB,EACVI,MAAOnB,OAGXkC,EAAAA,EAAAA,KAAA,SAAAD,UACEC,EAAAA,EAAAA,KAAChD,EAAK,CACJiD,KAAK,MACLnC,KAAK,SACLoC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,YAAY,qBACZC,SAAUzB,EACVI,MAAOT,OAIXwB,EAAAA,EAAAA,KAAC9C,EAAM,CAAC+C,KAAK,SAAQF,SAAC,kBAG5B,E,UC1Fa/C,EAAQJ,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qKAWpByD,EAAQ3D,EAAAA,GAAAA,MAAYG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,mKCcjC,EArBe,WACb,IAAM4B,GAAWC,EAAAA,EAAAA,MACXjB,GAASkB,EAAAA,EAAAA,IAAYnB,GAM3B,OACEyB,EAAAA,EAAAA,MAACqB,EAAK,CAAAR,SAAA,CAAC,yBAELC,EAAAA,EAAAA,KAAChD,EAAK,CACJiD,KAAK,OACLI,YAAY,wBACZpB,MAAOvB,EACP4C,SAXW,SAAAxB,GACfJ,GAAS8B,EAAAA,EAAAA,IAAU1B,EAAEe,OAAOZ,OAC9B,MAaF,ECEA,EArBwB,WACtB,IAAMP,GAAWC,EAAAA,EAAAA,MACX8B,GAAkB7B,EAAAA,EAAAA,IAAYjB,GAOpC,OAAO8C,EAAgBC,KAAI,SAAA7C,GAA2B,IAAxB8C,EAAE9C,EAAF8C,GAAI7C,EAAID,EAAJC,KAAMU,EAAMX,EAANW,OACtC,OACEU,EAAAA,EAAAA,MAAA,MAAAa,SAAA,CACGjC,EAAK,KAAGU,GACTwB,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAASW,QAAS,kBAThB,SAACD,EAAI7C,GACxBY,GAASmC,EAAAA,EAAAA,IAAcF,IACvBpB,IAAAA,OAAAA,QAAwB,WAADC,OAAY1B,EAAI,yBACzC,CAM2CgD,CAAaH,EAAI7C,EAAK,EAACiC,SAAC,aAFtDY,EAOb,GACF,ECdA,EARqB,WACnB,OACEX,EAAAA,EAAAA,KAAA,MAAIe,MAAO,CAAEC,UAAW,QAASjB,UAC/BC,EAAAA,EAAAA,KAACiB,EAAe,KAGtB,E,UC4BA,EA5BiB,WACf,IAAMvC,GAAWC,EAAAA,EAAAA,MACjBuC,GAA0CtC,EAAAA,EAAAA,IAAYxB,GAA9CI,EAAW0D,EAAX1D,YAAa2D,EAASD,EAATC,UAAWC,EAAKF,EAALE,MAMhC,OAJAC,EAAAA,EAAAA,YAAU,WACR3C,GAAS4C,EAAAA,EAAAA,MACX,GAAG,CAAC5C,KAGFQ,EAAAA,EAAAA,MAACqC,EAAAA,GAAS,CAAAxB,SAAA,EACRC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAAAzB,SAAC,eACNC,EAAAA,EAAAA,KAACyB,EAAW,KAEZvC,EAAAA,EAAAA,MAACqC,EAAAA,GAAS,CAAAxB,SAAA,CACPoB,IAAcC,IAASpB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAC1BqB,IAASpB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+BACZvC,EAAYkE,OAAS,IACpBxC,EAAAA,EAAAA,MAACqC,EAAAA,GAAS,CAAAxB,SAAA,EACRC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAS,CAAA5B,SAAC,cACXC,EAAAA,EAAAA,KAAC4B,EAAM,OAGVpE,EAAYkE,OAAS,IAAK1B,EAAAA,EAAAA,KAAC6B,EAAY,SAIhD,C","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactsList/ContactsList.jsx","Pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const StyledForm = styled.form`\n  overflow: hidden;\n  align-items: center;\n  padding: 40px 30px 30px 30px;\n  border-radius: 10px;\n  width: 400px;\n  box-shadow: 5px 10px 10px rgba(rgba(2, 128, 144, 1), 0.2);\n`;\n\nexport const Input = styled.input`\n  display: block;\n  border-radius: 5px;\n  font-size: 16px;\n  background: white;\n  width: 100%;\n  border: 0;\n  padding: 10px 10px;\n  margin: 15px -10px;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  color: #fff;\n  font-size: 16px;\n  /* text-transform: uppercase; */\n  width: 100px;\n  border: 0;\n  padding: 10px 0;\n  margin-top: 10px;\n  margin-left: -5px;\n  border-radius: 5px;\n  background-color: #3f51b5;\n  transition: background-color 300ms;\n\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\nexport const selectContactsList = state => state.contacts.contactsArr;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContactsList, selectFilter],\n  (contactsArr, filter) => {\n    return contactsArr.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { Button, Input, StyledForm } from './ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport Notiflix from 'notiflix';\nimport { selectContactsList } from 'redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      Notiflix.Notify.failure(`Name ${[name]} is already exist`);\n      return;\n    } else if (contacts.some(contact => contact.number === number)) {\n      Notiflix.Notify.failure(`Number ${number} is already exist`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name,\n        number,\n      })\n    )\n      .unwrap()\n      .than(() => {\n        Notiflix.Notify.success('Contact added');\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('Something went wrong :(');\n      });\n\n    setName('');\n    setNumber('');\n    e.target.reset();\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Enter name\"\n          onChange={handleInputChange}\n          value={name}\n        />\n      </label>\n      <label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter phone number\"\n          onChange={handleInputChange}\n          value={number}\n        />\n      </label>\n\n      <Button type=\"submit\">Add contact</Button>\n    </StyledForm>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  display: block;\n  border-radius: 5px;\n  font-size: 12px;\n  background: white;\n  width: 100%;\n  border: 0;\n  padding: 5px 5px;\n  margin-top: 5px;\n`;\n\nexport const Label = styled.label`\n  font-family: inherit;\n  font-size: 14px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 700;\n  color: #444444;\n  margin-bottom: 8px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nimport { Input, Label } from './Filter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        placeholder=\"Enter name of contact\"\n        value={filter}\n        onChange={onFilter}\n      ></Input>\n    </Label>\n  );\n};\n\nexport default Filter;\n","import {} from './ContactListItem.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst ContactListItem = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const handleDelete = (id, name) => {\n    dispatch(deleteContact(id));\n    Notiflix.Notify.success(`Contact ${name} deleted successfully`);\n  };\n\n  return visibleContacts.map(({ id, name, number }) => {\n    return (\n      <li key={id}>\n        {name}: {number}\n        <button type=\"button\" onClick={() => handleDelete(id, name)}>\n          Delete\n        </button>\n      </li>\n    );\n  });\n};\n\nexport default ContactListItem;\n","import {} from './ContactsList.styled';\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nconst ContactsList = () => {\n  return (\n    <ul style={{ listStyle: 'none' }}>\n      <ContactListItem />\n    </ul>\n  );\n};\n\nexport default ContactsList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container, Text, TextSmall } from './Pages.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const { contactsArr, isLoading, error } = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Text>Phonebook</Text>\n      <ContactForm />\n\n      <Container>\n        {isLoading && !error && <b>Loading...</b>}\n        {error && <p>Oops, something went wrong</p>}\n        {contactsArr.length > 0 && (\n          <Container>\n            <TextSmall>Contacts</TextSmall>\n            <Filter />\n          </Container>\n        )}\n        {contactsArr.length > 0 && <ContactsList />}\n      </Container>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","Input","_templateObject3","Button","_templateObject4","selectContacts","state","contacts","selectContactsList","contactsArr","selectFilter","filter","selectVisibleContacts","createSelector","_ref","name","toLowerCase","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","e","_e$currentTarget","currentTarget","value","_jsxs","onSubmit","preventDefault","some","contact","Notiflix","concat","addContact","unwrap","than","catch","target","reset","children","_jsx","type","pattern","title","required","placeholder","onChange","Label","setFilter","visibleContacts","map","id","onClick","deleteContact","handleDelete","style","listStyle","ContactListItem","_useSelector","isLoading","error","useEffect","fetchContacts","Container","Text","ContactForm","length","TextSmall","Filter","ContactsList"],"sourceRoot":""}
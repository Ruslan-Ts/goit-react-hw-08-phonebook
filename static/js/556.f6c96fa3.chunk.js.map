{"version":3,"file":"static/js/556.f6c96fa3.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactsList/ContactsList.jsx","Pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const StyledForm = styled.form`\n  overflow: hidden;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding: 40px 30px 30px 30px;\n  border-radius: 10px;\n  width: 400px;\n  box-shadow: 5px 10px 10px rgba(rgba(2, 128, 144, 1), 0.2);\n`;\n\nexport const Input = styled.input`\n  display: block;\n  border-radius: 5px;\n  font-size: 16px;\n  background: white;\n  width: 400px;\n  border: 0;\n  padding: 10px 10px;\n  margin: 15px -10px;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  color: #fff;\n  font-size: 16px;\n  /* text-transform: uppercase; */\n  width: 130px;\n  border: 0;\n  padding: 10px 0;\n  margin-top: 10px;\n  margin-left: -5px;\n  border-radius: 5px;\n  background-color: #3f51b5;\n  transition: background-color 300ms;\n  display: flex;\n  justify-content: space-around;\n\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\nexport const selectContactsList = state => state.contacts.contactsArr;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContactsList, selectFilter],\n  (contactsArr, filter) => {\n    return contactsArr.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { Button, Input, StyledForm } from './ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport Notiflix from 'notiflix';\nimport { selectContactsList } from 'redux/contacts/selectors';\nimport { FaPlus } from 'react-icons/fa';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      Notiflix.Notify.failure(`Name ${[name]} is already exist`);\n      return;\n    } else if (contacts.some(contact => contact.number === number)) {\n      Notiflix.Notify.failure(`Number ${number} is already exist`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name,\n        number,\n      })\n    );\n    // .unwrap()\n    // .than(() => {\n    //   Notiflix.Notify.success('Contact added');\n    // })\n    // .catch(() => {\n    //   Notiflix.Notify.failure('Something went wrong :(');\n    // });\n    Notiflix.Notify.success(`Contact ${name} added`);\n\n    setName('');\n    setNumber('');\n    e.target.reset();\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Enter name\"\n          onChange={handleInputChange}\n          value={name}\n        />\n      </label>\n      <label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter phone number\"\n          onChange={handleInputChange}\n          value={number}\n        />\n      </label>\n      <Button type=\"submit\">\n        <FaPlus />\n        Add contact\n      </Button>\n    </StyledForm>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  display: block;\n  border-radius: 5px;\n  font-size: 12px;\n  background: white;\n  width: 100%;\n  border: 0;\n  padding: 5px 5px;\n  margin-top: 5px;\n`;\n\nexport const Label = styled.label`\n  font-family: inherit;\n  font-size: 14px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 700;\n  color: #444444;\n  margin-bottom: 8px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nimport { Input, Label } from './Filter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        placeholder=\"Enter name of contact\"\n        value={filter}\n        onChange={onFilter}\n      ></Input>\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Table = styled.table`\n  font-size: 30px;\n  font-weight: 500;\n  padding: 5px 20px;\n`;\nexport const TableHead = styled.thead`\n  background-color: #8467f8;\n  font-size: 20px;\n  font-weight: 700;\n`;\nexport const TableBody = styled.tbody`\n  background-color: #bebcf9;\n  font-size: 15px;\n  font-weight: 500;\n`;\nexport const TableCell = styled.td`\n  padding: 5px 20px;\n`;\n\nexport const TableLine = styled.tr`\n  &:nth-of-type(2n) {\n    background-color: #9a96ff;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TableCell = styled.td`\n  padding: 5px 20px;\n`;\n\nexport const TableLine = styled.tr`\n  &:nth-of-type(2n) {\n    background-color: #9a96ff;\n  }\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  color: #fff;\n  font-size: 16px;\n  /* text-transform: uppercase; */\n  /* width: 100px; */\n  border: 0;\n  padding: 10px 8px;\n  /* margin-top: 10px;\n  margin-left: -5px; */\n  border-radius: 5px;\n  background-color: #3f51b5;\n  transition: background-color 300ms;\n\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n`;\n","import { Button, TableCell, TableLine } from './ContactListItem.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst ContactListItem = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const handleDelete = (id, name) => {\n    dispatch(deleteContact(id));\n    Notiflix.Notify.success(`Contact ${name} deleted successfully`);\n  };\n\n  return visibleContacts.map(({ id, name, number }) => {\n    return (\n      <TableLine key={id}>\n        <TableCell>{name}</TableCell>\n        <TableCell>{number}</TableCell>\n        <Button type=\"button\" onClick={() => handleDelete(id, name)}>\n          Delete\n        </Button>\n      </TableLine>\n    );\n  });\n};\n\nexport default ContactListItem;\n","import { Table, TableBody, TableCell, TableHead } from './ContactsList.styled';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport { FaTrashAlt } from 'react-icons/fa';\n\nconst ContactsList = () => {\n  return (\n    <Table>\n      <TableHead>\n        <TableCell>Name</TableCell>\n        <TableCell>Number</TableCell>\n        <TableCell>\n          <FaTrashAlt />\n        </TableCell>\n      </TableHead>\n      <TableBody>\n        <ContactListItem />\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default ContactsList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container, Text, TextSmall } from './Pages.styled';\nimport Loader from 'components/Loader';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const { contactsArr, isLoading, error } = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Text>Phonebook</Text>\n      <ContactForm />\n\n      <Container>\n        {isLoading && !error && <Loader />}\n        {error && <p>Oops, something went wrong</p>}\n        {contactsArr.length > 0 && (\n          <Container>\n            <TextSmall>Contacts</TextSmall>\n            <Filter />\n          </Container>\n        )}\n        {contactsArr.length > 0 && <ContactsList />}\n      </Container>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","Input","_templateObject3","Button","_templateObject4","selectContacts","state","contacts","selectContactsList","contactsArr","selectFilter","filter","selectVisibleContacts","createSelector","_ref","name","toLowerCase","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","e","_e$currentTarget","currentTarget","value","_jsxs","onSubmit","preventDefault","some","contact","Notiflix","concat","addContact","target","reset","children","_jsx","type","pattern","title","required","placeholder","onChange","FaPlus","Label","setFilter","Table","TableHead","TableBody","TableCell","_templateObject5","TableLine","visibleContacts","map","id","onClick","deleteContact","handleDelete","FaTrashAlt","ContactListItem","_useSelector","isLoading","error","useEffect","fetchContacts","Container","Text","ContactForm","Loader","length","TextSmall","Filter","ContactsList"],"sourceRoot":""}